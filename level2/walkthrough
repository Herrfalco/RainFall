- str can be overflowed, thanks to gets, in order to override p return address
with function system address
- using gdb we find that system address @ 0xb7e6b060

- but return address is tested and program exits if return address begins with 0xb

- so we have to put p RET instruction address inside its own return address, in
order to pop it, and execute the instruction one byte higher on the stack (where
system address will be)
- p RET instruction address can be found in disassembled function @ 0x0804853e
- we also need to add 4 random bytes to simulate a return address for our system
function call
- then we put system adresse parameter over that return address
- so we can put it ("/bin/sh") at the beginning of str and thanks to ltrace
we can find the address of strdup result on the heap, @ 0x0804a008, to use it
as a parameter

- so we have to fill str (64 bytes), ptr (12 bytes) and saved ebp (4 bytes) with
"/bin/bash" and zeros (to end up the string) and add to it p RET instruction address,
system address, 4 random bytes and finally the address of strdup result on heap
	- (ruby -e 'print "/bin/sh" + "\x00" * (80 - 7) + "\x3e\x85\x04\x08" +
	"\x60\xb0\xe6\xb7" + "x" * 4 + "\x08\xa0\x04\x08"'; cat) | ./level2
	- cat /home/user/level3/.pass
